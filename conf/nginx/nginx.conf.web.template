http
{
    # disable nginx version on error pages
    server_tokens off;

    #  Define the collection of upstream HTTP servers to which we will proxy
    #  Define each server:port against a server directive
    # 
    upstream ${web.upstream.name}
    {
        ${web.upstream.:servers}
        zmauth;
    }

    #  Define the collection of upstream HTTPS servers to which we will proxy
    #  Define each server:port against a server directive
    upstream ${web.ssl.upstream.name}
    {
        ${web.ssl.upstream.:servers}
        zmauth;
    }

    #  Define the collection of upstream admin console servers to which we will
    #  proxy. Define each server:port against a server directive
    #
    upstream ${web.admin.upstream.name}
    {
        ${web.admin.upstream.:servers}
        zmauth_admin;
    }

    # Set proxy timeout
    proxy_read_timeout ${web.upstream.read.timeout};
    proxy_send_timeout ${web.upstream.send.timeout};

    # Custom error pages for upstream connection errors
    ${web.:error_pages}

    ${ssl.clientcertca.enabled}ssl_client_certificate  ${ssl.clientcertca.default};

    ${web.http.enabled}include ${core.includes}/${core.cprefix}.web.http;
    ${web.http.enabled}include ${core.includes}/${core.cprefix}.web.http.default;
    ${web.https.enabled}include ${core.includes}/${core.cprefix}.web.https;
    ${web.https.enabled}include ${core.includes}/${core.cprefix}.web.https.default;
    ${web.sso.enabled}include ${core.includes}/${core.cprefix}.web.sso;
    ${web.sso.default.enabled}include ${core.includes}/${core.cprefix}.web.sso.default;
    ${web.admin.default.enabled}include ${core.includes}/${core.cprefix}.web.admin;
    ${web.admin.default.enabled}include ${core.includes}/${core.cprefix}.web.admin.default;
}
