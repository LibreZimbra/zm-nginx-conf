!{explode domain(vhn, sso)}
# HTTPS SSO Proxy vhost Configuration (for client cert authentication)
#
server {
    server_name             ${vhn};
    ${web.listen.sso.vhost}
    ssl                     on;
    ssl_protocols           ${web.ssl.protocols};
    ssl_prefer_server_ciphers ${web.ssl.preferserverciphers};
    ssl_session_cache       ${ssl.session.cachesize};
    ssl_session_timeout     ${ssl.session.timeout};
    ssl_ciphers             ${web.ssl.ciphers};
    ssl_ecdh_curve          ${web.ssl.ecdh.curve};
    ssl_certificate         ${ssl.crt};
    ssl_certificate_key     ${ssl.key};
    ssl_verify_client       ${ssl.clientcertmode};
    ssl_verify_depth        ${ssl.clientcertdepth.default};
    ssl_stapling            ${web.ssl.stapling};
    ssl_stapling_verify     ${web.ssl.stapling};
    ${ssl.clientcertca.enabled}ssl_client_certificate  ${ssl.clientcertca.default};
    ${ssl.stapling.responder.enabled}ssl_stapling_responder  ${ssl.stapling.responder.url};
    ${web.ssl.dhparam.enabled}ssl_dhparam             ${web.ssl.dhparam.file};
    limit_req               zone=one burst=10;

    error_page 495 496 497 =403 /50x.html;

    ${web.blocked.user.agents.enabled}if ($http_user_agent ~* (${web.blocked.user.agents})) {
    ${web.blocked.user.agents.enabled}    return 403;
    ${web.blocked.user.agents.enabled}}
    
${web.sso.certauth.enabled}    location = /certauth {
${web.sso.certauth.enabled}        zm_sso certauth;
${web.sso.certauth.enabled}        zm_sso_redirect_url ${vhn}:${web.https.port};
${web.sso.certauth.enabled}    }

${web.sso.certauth.enabled}    location = /certauth/admin {
${web.sso.certauth.enabled}        zm_sso certauth_admin;
${web.sso.certauth.enabled}        zm_sso_redirect_url ${vhn}:${web.admin.port};
${web.sso.certauth.enabled}    }

    location / {
        return 403; #other resource access is forbidden
    }
}

    

